function showMessage() {
  let message = 'Привет!';
  console.log(message); 
}

showMessage();

console.log(message); 
//Переменная внутри функции видна только там.
//Вне функции — её нет, и будет ошибка.
//Это потому, что переменные в функции — локальные.


if (true) {
  let blockVariable = 'Я внутри блока';
  console.log(blockVariable); 
}

console.log(blockVariable);
//Переменная, объявленная внутри блока if с let, существует только в этом блоке.
//Вне блока её нет, поэтому при попытке использовать — ошибка.



//Hoisting-это как если бы JavaScript поднимает все объявления переменных и функций вверх к началу.
//Это значит, что я могу вызвать функцию или обратиться к переменной до того, как их написал в коде,
//но некоторые ведут себя по-разному

//У var переменная становится undefined, и я могу к ней обратиться, но она не содержит настоящее значение пока я не присвою его позже.
console.log(x); 
  var x = 5;
//У let и const переменные тоже поднимаются, но если я попробую к ним обратиться раньше, чем они объявлены — будет ошибка.
console.log(y); 
  let y = 10;
//Функции, объявленные с помощью function, вообще поднимаются полностью, их можно вызвать еще до объявления.
greet();
function greet() {
  console.log('Привет!');
}
